#+TITLE:       Preview pdf in org-mode
#+AUTHOR:      jain.y
#+EMAIL:       jain.y@126.com
#+DATE:        2015-10-25 Sun
#+URI:         /blog/%y/%m/%d/priview-pdf-in-org-mode
#+KEYWORDS:    org-mode, Latex
#+TAGS:        org-mode, LaTeX
#+LANGUAGE:    en
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: 在 org-mode 预览 pdf 文件


* 环境准备
 * 需要安装 Latex 套件，这个不是本文点重点，如果你在 org-mode 下还不能正常导出 pdf 文件，那么下面的内容和你还没什么关系。你就不用浪费时间了，先去折腾 org-mode 写 pdf 吧。

* 安装插件

** latex-preview-pane
可以手动安装，可以通过 emacs 的 package-install 安装。
安装完成后设置很简单，只需要在配置文件中加一句
#+BEGIN_SRC emacs-lisp
(latex-preview-pane-enable)
#+END_SRC

我从 org-mode 生成 pdf 的时候使用的是 xelatex，latex-preview-pane 默认使用的是 pdflatex。
#+BEGIN_SRC emacs-lisp
(setq pdf-latex-command "xelatex")
#+END_SRC

具体可以参考 [[http://www.emacswiki.org/emacs/LaTeXPreviewPane][EmacsWiki: La Te X Preview Pane]] 。

一般情况，以前步骤完成后，就可以正常使用了。可是可是，我通常都遇到的都是很二般的情况。看我下面慢慢道来。

* 遇到的问题

** 对 latex-preview-pane 插件对理解
看了这个插件的一些功能以后，感觉其实他跟 org-mode 没任何关系，这个插件事很 Latex 文件（.tex）直接相关的，
这个插件是在 tex 文件保存时，生成并预览 pdf。而他不仅仅可以实时预览，更重要的是可以定位错误行。当 tex 文件
出现错误时，他就会停止并定位到错误行。OMG，我的 org-latex-classes 配置可是全靠-interaction nonstopmode 忽
略一切错误才生成的 pdf，有点小问题你就罢工了。。。不合适。

** hack latex-preview-pane
看到下面这里的时候，我恍然大悟，立刻去看了用我的命令生成 pdf 文件后，命令的范围值 —— 1，是 1。。
为什么是 1 呢，我觉得应该是因为我的 org-latex-classes 会出很警告，或者直接出错误，我不懂 LaTeX 的，只知道
用 org-mode 生成 pdf 很方便，又没时间去了解 LaTeX，就只有去造个返回值 0，欺骗一下下。
#+BEGIN_SRC emacs-lisp
(defun lpp/invoke-pdf-latex-command ()
  (let ((buff (expand-file-name (lpp/buffer-file-name))) (default-directory (file-name-directory (expand-file-name (lpp/buffer-file-name)))))
    (if shell-escape-mode
	(call-process pdf-latex-command nil "*pdflatex-buffer*" nil shell-escape-mode buff)
      (call-process pdf-latex-command nil "*pdflatex-buffer*" nil buff)
      )
    )
  )

(defun latex-preview-pane-update-p () 
(if (eq (lpp/invoke-pdf-latex-command) 1) //重点看这里，判断了范围值
    (progn
      (lpp/display-backtrace)
      (remove-overlays)
      (lpp/line-errors-to-layovers (lpp/line-errors))
      )
  
  (let ((pdf-filename (replace-regexp-in-string "\.tex$" ".pdf" (lpp/buffer-file-name)))
  (tex-buff (current-buffer))
  (pdf-buff (replace-regexp-in-string "\.tex" ".pdf" (buffer-name (get-file-buffer (lpp/buffer-file-name))))))
    (remove-overlays)
    ;; if the file doesn't exist, say that the file isn't available due to error messages
    (if (file-exists-p pdf-filename)
    (if (eq (get-buffer pdf-buff) nil)
        (set-window-buffer (lpp/window-containing-preview) (find-file-noselect pdf-filename))
      (progn 
        (set-window-buffer (lpp/window-containing-preview) pdf-buff) 
        (switch-to-buffer-other-window pdf-buff)
        (doc-view-revert-buffer nil t)
        (switch-to-buffer-other-window tex-buff) 
        ))
  
      ))))
#+END_SRC

*** Windows 
刚配置好的时候是在 Win7 的系统下完成的，就写了一个批处理，把 xelatex 命令包了一层，不知道要传几个参数进来，
偷懒就写了 5 个。
#+BEGIN_SRC shell-script
xelatex -interaction nonstopmode %1 %2 %3 %4 %5
exit 0
#+END_SRC

在 emacs 中显示 pdf 需要 xpdf 和 ghostscript。
我在 windows 下使用 msys2，直接
#+BEGIN_EXAMPLE
pacman -S xpdf ghostscript
#+END_EXAMPLE
就可以了。
*** Linux/Mac
既然在 Windows 下一个批处理就搞定了
#+BEGIN_SRC shell-script
#!/bin/bash
xelatex -interaction nonstopmode $*
exit 0
#+END_SRC



